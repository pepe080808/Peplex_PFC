<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EpisodeDelete" xml:space="preserve">
    <value>DELETE Episode WHERE SerieId = @SerieId AND Season = @Season AND Number = @Number
</value>
  </data>
  <data name="EpisodeFindAll" xml:space="preserve">
    <value>SELECT * FROM Episode</value>
  </data>
  <data name="EpisodeInsert" xml:space="preserve">
    <value>INSERT INTO Episode (SerieId, Season, Number, Name, FormatId)
VALUES (@SerieId, @Season, @Number, @Name, @FormatId);
SELECT @@IDENTITY;</value>
  </data>
  <data name="EpisodeMaxPk" xml:space="preserve">
    <value />
  </data>
  <data name="EpisodeSelectById" xml:space="preserve">
    <value>SELECT *
FROM Episode
WHERE SerieId = @SerieId AND Season = @Season AND Number = @Number</value>
  </data>
  <data name="EpisodeUpdate" xml:space="preserve">
    <value>UPDATE Episode
SET Name = @Name, FormatId = @FormatId
WHERE SerieId = @SerieId AND Season = @Season AND Number = @Number</value>
  </data>
  <data name="FilmDelete" xml:space="preserve">
    <value>DELETE Film WHERE Id = @Id</value>
  </data>
  <data name="FilmFindAll" xml:space="preserve">
    <value>SELECT * FROM Film</value>
  </data>
  <data name="FilmInsert" xml:space="preserve">
    <value>INSERT INTO Film (Title, Subtitle, FormatId, GenreId01, GenreId02, Synopsis, DurationMin, DownloadDate, PremiereDate, TrailerURL, Note, Cover, Background)
VALUES(@Title, @Subtitle, @FormatId, @GenreId01, @GenreId02, @Synopsis, @DurationMin, @DownloadDate, @PremiereDate, @TrailerURL, @Note, @Cover, @Background);
SELECT @@IDENTITY;</value>
  </data>
  <data name="FilmMaxPk" xml:space="preserve">
    <value>SELECT ISNULL(MAX(Id), 0) FROM Film</value>
  </data>
  <data name="FilmSelectById" xml:space="preserve">
    <value>SELECT *
FROM Film
WHERE Id = @Id</value>
  </data>
  <data name="FilmUpdate" xml:space="preserve">
    <value>UPDATE Film
SET Title = @Title, Subtitle = @Subtitle, FormatId = @FormatId,  GenreId01 = @GenreId01, GenreId02 = @GenreId02, Synopsis = @Synopsis, DurationMin = @DurationMin, DownloadDate = @DownloadDate, PremiereDate = @PremiereDate, Note = @Note, Cover = @Cover, Background = @Background
WHERE Id = @Id</value>
  </data>
  <data name="FormatDelete" xml:space="preserve">
    <value>DELETE Format WHERE Id = @Id
</value>
  </data>
  <data name="FormatFindAll" xml:space="preserve">
    <value>SELECT * FROM Format</value>
  </data>
  <data name="FormatInsert" xml:space="preserve">
    <value>INSERT INTO Format (Name, Quality)
VALUES(@Name, @Quality);
SELECT @@IDENTITY;
</value>
  </data>
  <data name="FormatMaxPk" xml:space="preserve">
    <value>SELECT ISNULL(MAX(Id), 0) FROM Format</value>
  </data>
  <data name="FormatSelectById" xml:space="preserve">
    <value>SELECT *
FROM Format
WHERE Id = @Id
</value>
  </data>
  <data name="FormatUpdate" xml:space="preserve">
    <value>UPDATE Format
SET Name = @Name, Quality = @Quality
WHERE Id = @Id
</value>
  </data>
  <data name="GenreDelete" xml:space="preserve">
    <value>DELETE Genre WHERE Id = @Id</value>
  </data>
  <data name="GenreFindAll" xml:space="preserve">
    <value>SELECT * FROM Genre</value>
  </data>
  <data name="GenreInsert" xml:space="preserve">
    <value>INSERT INTO Genre (Name)
VALUES(@Name);
SELECT @@IDENTITY;</value>
  </data>
  <data name="GenreMaxPk" xml:space="preserve">
    <value>SELECT ISNULL(MAX(Id), 0) FROM Genre</value>
  </data>
  <data name="GenreSelectById" xml:space="preserve">
    <value>SELECT *
FROM Genre
WHERE Id = @Id</value>
  </data>
  <data name="GenreUpdate" xml:space="preserve">
    <value>UPDATE Genre
SET Name = @Name
WHERE Id = @Id</value>
  </data>
  <data name="SerieDelete" xml:space="preserve">
    <value>DELETE Serie WHERE Id = @Id</value>
  </data>
  <data name="SerieFindAll" xml:space="preserve">
    <value>SELECT * FROM Serie</value>
  </data>
  <data name="SerieInsert" xml:space="preserve">
    <value>INSERT INTO Serie (Title, GenreId01, GenreId02, Synopsis, DurationMin, DownloadDate, PremiereDate, Note, Cover, Background)
VALUES(@Title, @GenreId01, @GenreId02, @Synopsis, @DurationMin, @DownloadDate, @PremiereDate, @Note, @Cover, @Background);
SELECT @@IDENTITY;</value>
  </data>
  <data name="SerieMaxPk" xml:space="preserve">
    <value>SELECT ISNULL(MAX(Id), 0) FROM Serie</value>
  </data>
  <data name="SerieSelectById" xml:space="preserve">
    <value>SELECT *
FROM Serie
WHERE Id = @Id</value>
  </data>
  <data name="SerieUpdate" xml:space="preserve">
    <value>UPDATE Serie
SET Title = @Title, GenreId01 = @GenreId01, GenreId02 = @GenreId02, Synopsis = @Synopsis, DurationMin = @DurationMin, DownloadDate = @DownloadDate, PremiereDate = @PremiereDate, Note = @Note, Cover = @Cover, Background = @Background
WHERE Id = @Id
</value>
  </data>
  <data name="UserDelete" xml:space="preserve">
    <value>DELETE UserInfo WHERE Id = @Id</value>
  </data>
  <data name="UserFindAll" xml:space="preserve">
    <value>SELECT * FROM UserInfo</value>
  </data>
  <data name="UserGetEpisodeSeen" xml:space="preserve">
    <value>SELECT * FROM EpisodeSeen WHERE UserId = @Id</value>
  </data>
  <data name="UserGetEpisodeTime" xml:space="preserve">
    <value>SELECT * FROM UserEpisodeTime WHERE UserId = @Id</value>
  </data>
  <data name="UserGetFilmSeen" xml:space="preserve">
    <value>SELECT * FROM FilmSeen WHERE UserId = @Id</value>
  </data>
  <data name="UserGetFilmTime" xml:space="preserve">
    <value>SELECT * FROM UserFilmTime WHERE UserId = @Id</value>
  </data>
  <data name="UserGetSerieSeen" xml:space="preserve">
    <value>SELECT * FROM SerieSeen WHERE UserId = @Id</value>
  </data>
  <data name="UserInsert" xml:space="preserve">
    <value>INSERT INTO UserInfo (Name, NickName, Password, Email, Bitmap, Permissions)
VALUES (@Name, @NickName, @Password, @Email, @Bitmap, @Permissions);
SELECT @@IDENTITY;
</value>
  </data>
  <data name="UserMaxPk" xml:space="preserve">
    <value>SELECT ISNULL(MAX(Id), 0) FROM UserInfo</value>
  </data>
  <data name="UserUpdateEpisodeSeen" xml:space="preserve">
    <value>DELETE FROM SerieSeen WHERE UserId = @UserId;
INSERT INTO SerieSeen (UserId, SerieId, Season, Number) VALUES (@UserId, @SerieId, @Season, @Number);</value>
  </data>
  <data name="UserUpdateEpisodeTime" xml:space="preserve">
    <value>DELETE FROM UserEpisodeTime WHERE UserId = @UserId;
INSERT INTO UserEpisodeTime (UserId, SerieId, Season, Number, SecondTime) VALUES (@UserId, @SerieId, @Season, @Number, @SecondTime);</value>
  </data>
  <data name="UserUpdateFilmSeen" xml:space="preserve">
    <value>DELETE FROM FilmSeen WHERE UserId = @UserId;
INSERT INTO FilmSeen (UserId, FilmId) VALUES (@UserId, @FilmId);</value>
  </data>
  <data name="UserUpdateFilmTime" xml:space="preserve">
    <value>DELETE FROM UserFilmTime WHERE UserId = @UserId;
INSERT INTO UserFilmTime (UserId, FilmId, SecondTime) VALUES (@UserId, @FilmId, @SecondTime);</value>
  </data>
  <data name="UserUpdateSerieSeen" xml:space="preserve">
    <value>DELETE FROM SerieSeen WHERE UserId = @UserId;
INSERT INTO SerieSeen (UserId, SerieId) VALUES (@UserId, @SerieId);</value>
  </data>
  <data name="UserSelectById" xml:space="preserve">
    <value>SELECT *
FROM UserInfo
WHERE Id = @Id</value>
  </data>
  <data name="UserUpdate" xml:space="preserve">
    <value>UPDATE UserInfo
SET Name = @Name, NickName = @NickName, Email = @Email, Password = @Password, Bitmap = @Bitmap, Permissions = @Permissions
WHERE Id = @Id
</value>
  </data>
</root>